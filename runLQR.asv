clear
close all

%% Dynamics Equation Generation
syms m_tot m_k m_a m_w  % Mass parameters
syms r_tot r_k r_w      % Radius parameters
syms TH_k TH_w TH_a     % Inertial parameters
syms gam l g            % Misc parameters
syms t y                % Simulation parameters

% Symbolic state and input vectors
q = sym('q', [4, 1]);
u = sym('u', [1, 1]);

% % Mass term in Langrangian formulation (Eqn. 2.22)
% M_x = [m_tot*r_k^2 + TH_k + (r_k/r_w)^2*TH_w, -(r_k/(r_w^2))*r_tot*TH_w+gam*r_k*cos(q(3)); ...
%     -(r_k/(r_w^2))*r_tot*TH_w+gam*r_k*cos(q(3)), ((r_tot^2)/(r_w^2))*TH_w + TH_a + m_a*l^2 + m_w*r_tot^2];
% 
% % Coriolis term in Langrangian formulation (Eqn. 2.23)
% C_x = [-r_k*gam*sin(q(3)*q(4)^2); 0];
% 
% % Gravitational term in Lagrangian formulation (Eqn. 2.24)
% G_x = [0; -g*sin(q(3))*gam];
% 
% % Non-potential force term in Lagrangian formulation (Eqn. 2.17 + Eqn. 2.18)
% f_np = [(r_k/r_w)*u; u-(1+(r_k/r_w))*u];
% 
% % Solve for ddq in M(q, dq)*ddq + C(q, dq) + G(q) = f_np, simplify
% ddq = M_x\(f_np - G_x - C_x);
% ddq = subs(ddq, {m_tot, r_tot, gam}, {m_k+m_a+m_w, r_k+r_w, l*m_a+(r_k+r_w)*m_w});
% 
% % Substitute in values for physical parameters
% ddq = subs(ddq, {TH_a,TH_k,TH_w,g,l,m_a,m_k,m_w,r_k,r_w}, {4.76, 0.0239, 0.00236, 9.81, 0.339, 9.2, 2.29, 3, 0.125, 0.06});
% 
% % Full dynamics equation
% dynamics = [q(2); ddq(1); q(4); ddq(2)];


%% LQR
% % Linearized dynamics at upper position
A = subs(jacobian(dynamfunc(t, q, u), q), {q(1), q(2), q(3), q(4)}, {0, 0, 0, 0});
B = subs(jacobian(dynamics, u), {u, q(1), q(2), q(3), q(4)}, {0, 0, 0, 0, 0});
A = double(A);
B = double(B);

% Define quadratic cost for infinite time horizon
Q = eye(4);
R = 1;

% Initial and goal states
q0 = [0 0 0 0]';
qdes = [10 0 0 0]';

% Get Gain Matrix, K, with LQR
K = lqr(A,B,Q,R);

% Dynamics with LQR control inputs
odecon = @(t,q) dynamfunc(t, q, -K*(q-qdes));

% Nonlinear simulation
tspan = [0 10]; % simulation timespan
[tout, qout] = ode45(odecon, tspan, q0);


%% Plotting and Animation
plot(tout, qout);
legend("\phi", "d\phi", "\theta", "d\theta")

r_k = 0.125;        % Ball radius
r_w = 0.06;         % Omniwheel radius
psi = @(phi, th) -((r_k/r_w)*(phi-th)-th);
animate(tout, qout(:, 1), qout(:, 3), psi(qout(:, 1), qout(:, 3)));